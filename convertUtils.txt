//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package cn.tac.framework.easydev.core.domain.converter;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import org.apache.commons.collections.CollectionUtils;

public abstract class ConverterUtils {
    public ConverterUtils() {
    }

    public static <FROM, TO> TO convert(FROM from, Class<? extends FROM> fromClazz, Class<TO> toClazz) {
        return getConverter(fromClazz, toClazz).convert(from);
    }

    public static <FROM, TO> TO convert(FROM from, Class<TO> toClazz) {
        Objects.requireNonNull(from, "object from can not be null");
        return convert(from, from.getClass(), toClazz);
    }

    public static <FROM, TO> TO convert(FROM from, TO to) {
        return convert(from, to.getClass());
    }

    public static <FROM, TO> TO convert(FROM from, Class<? extends FROM> fromClazz, TO to) {
        return convert(from, fromClazz, to.getClass());
    }

    public static <FROM, TO> List<TO> convertAll(List<FROM> fromList, Class<TO> toCls) {
        return (List)(CollectionUtils.isEmpty(fromList) ? new ArrayList() : getConverter(fromList.get(0).getClass(), toCls).convertAll(fromList));
    }

    public static Converter getConverter(Class fromCls, Class toCls) {
        return ConverterFactory.find(fromCls, toCls);
    }
}
